buildscript {
	ext {
        springBootVersion = '1.4.0.RC1'
        
        sonarqubeGradlePluginVersion = '2.0.1';
        
		springIntegrationVersion = '1.1.3.RELEASE'
        springCloudVersion = '1.1.1.RELEASE'
        
		apacheCommonsVersion = '3.3.2'
		activitiVersion = '5.19.0'
		jacksonVersion = '2.7.2'
		jacksonMapperVersion = '1.9.13'
		swaggerVersion = '1.0.2'
		guavaVersion = '19.0'
		flywayVersion = '4.0'
                jsonjVersion = '2.29'
		dependencyManagementPlugin = '0.5.6.RELEASE'
		stfdigitalTestVersion = '0.0.1-SNAPSHOT'
		
		jacocoToolVersion = '0.7.7.201606060606'
	}
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
    }
}

apply plugin: 'java'

apply plugin: 'maven'

apply plugin: 'eclipse'

apply plugin: 'spring-boot'

apply plugin: 'signing'

apply plugin: 'jacoco'

apply plugin: 'org.sonarqube'

version = '0.0.1-SNAPSHOT'

group   = 'br.jus.stf.digital'

repositories {
	mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-milestone" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    
    compile("org.springframework.boot:spring-boot-starter")
		
    compile("org.springframework.boot:spring-boot-starter-web")
    
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    compile("org.springframework.boot:spring-boot-starter-amqp")
                
    compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
        
    compile("org.springframework.boot:spring-boot-starter-integration")
    
    compile("org.springframework.cloud:spring-cloud-commons:${springCloudVersion}")
		
    compile("org.springframework.integration:spring-integration-jdbc")

    compile("org.springframework.integration:spring-integration-amqp")

    compile("org.springframework.integration:spring-integration-java-dsl:${springIntegrationVersion}")
		
    compile("com.google.guava:guava:${guavaVersion}")
        
    compile("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
		
    compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
		
    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
        
    compile("org.activiti:activiti-spring-boot-starter-basic:$activitiVersion")
    
    compile("com.mangofactory:swagger-springmvc:$swaggerVersion")
    
    compile("com.h2database:h2")
    
    compile("org.flywaydb:flyway-core:$flywayVersion")
    
    compile("com.jayway.jsonpath:json-path")
    
    testCompile("com.jillesvangurp:jsonj:${jsonjVersion}")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile("br.jus.stf.digital:test:${stfdigitalTestVersion}")
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder 
eclipse.classpath.file {
    beforeMerged { classpath -> 
        classpath.entries.clear()
    }
    whenMerged {  cp -> 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main" 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test" 
        cp.entries.removeAll { it.kind == "output" }
    }
}

// Cobertura de testes
jacoco {
    toolVersion = jacocoToolVersion
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
	        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	            authentication(userName: ossrhUsername, password: ossrhPassword)
	        }
	
	        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	            authentication(userName: ossrhUsername, password: ossrhPassword)
	        }
	
	        pom.project {
	            name 'STF Digital - Plataforma - Core'
	            packaging 'jar'
	
	            description 'Biblioteca compartilhada pelos microserviços do STF Digital'
	            url 'http://supremotribunalfederal.github.io/stfdigital/'
	
	            scm {
	                connection 'scm:git:git@github.com:supremotribunalfederal/stfdigital-plataforma-core.git'
	                developerConnection 'scm:git:git@github.com:supremotribunalfederal/stfdigital-plataforma-core.git'
	                url 'git@github.com:supremotribunalfederal/stfdigital-plataforma-core.git'
	            }
	
	            licenses {
	                license {
	                    name 'GNU Lesser General Public License, Version 3.0'
	                    url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
	                }
	            }
	
	            developers {
	                developer {
	                    id 'tomas.godoi'
	                    name 'Tomás Godoi'
	                    email 'tomas.godoi@stf.jus.br'
	                }
	            }
	        }
	    }
    }
}
